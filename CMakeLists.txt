
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
INCLUDE(cppbuild_common)
PROJECT(futures_cpp)

MACRO(CPPBUILD_ENABLE_CXX14)
	# MSVC enable cxx14 by default
	if(NOT MSVC)
		SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -std=c++1y")
		SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -std=c++1y")
	endif()
ENDMACRO()

CPPBUILD_ENABLE_CXX11()
CPPBUILD_DEPEND()

INCLUDE_DIRECTORIES(${futures_cpp_SOURCE_DIR}/include)
AUX_SOURCE_DIRECTORY(src CORE_SRC)
AUX_SOURCE_DIRECTORY(src/folly FOLLY_LITE_SRC)
AUX_SOURCE_DIRECTORY(src/http HTTP_SRC)
ADD_SUBDIRECTORY(src/udns)
SET(ALL_SRC ${CORE_SRC} ${HTTP_SRC} ${UDNS_SRC} ${FOLLY_LITE_SRC})

if (UNIX)
  SET(LIBAE_SRC src/libae/anet.c)
endif()

SET(ALL_SRC ${ALL_SRC} ${LIBAE_SRC})

CPPBUILD_LIB_TARGET(futures_cpp ${ALL_SRC})
TARGET_LINK_LIBRARIES(futures_cpp udns)
CPPBUILD_INSTALL_LIB(futures_cpp)

if (CPPBUILD_IS_TOPLEVEL)
  CPPBUILD_APP_TARGET(ex_socket examples/socket.cpp)
  CPPBUILD_APP_TARGET(ex_fake_http examples/fake_http.cpp)
endif()

CPPBUILD_UNITTEST()
